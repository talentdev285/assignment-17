generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  mobile    String
  password  String
  otp       String
  created_at DateTime @db.Timestamp
  update_at  DateTime @db.Timestamp
  customer  Customer[]
  categories Categories[]
  products  Products[]
  invoices  Invoices[]
  invoice_products InvoiceProducts[]
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  mobile    String
  user_id   Int
  created_at DateTime @db.Timestamp
  update_at  DateTime @db.Timestamp
  user      User     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  invoices  Invoices[]
}

model Categories {
  id        Int      @id @default(autoincrement())
  name      String
  user_id   Int
  created_at DateTime @db.Timestamp
  update_at  DateTime @db.Timestamp
  user      User     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  products  Products[]
}

model Products {
  id          Int      @id @default(autoincrement())
  user_id     Int
  category_id Int
  name        String
  price       String   // Consider using a numeric type (e.g., Float) for price if applicable
  unit        String
  img_url     String
  created_at  DateTime @db.Timestamp
  update_at   DateTime @db.Timestamp
  invoice_products InvoiceProducts[]
  user        User     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  categories  Categories @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Invoices {
  id        Int      @id @default(autoincrement())
  total     String   // Consider using a numeric type (e.g., Decimal) for monetary values
  discount  String   // Consider using a numeric type (e.g., Decimal) for monetary values
  vat       String   // Consider using a numeric type (e.g., Decimal) for monetary values
  payable   String   // Consider using a numeric type (e.g., Decimal) for monetary values
  user_id   Int
  customer_id Int    // Corrected field name
  created_at DateTime @db.Timestamp
  update_at  DateTime @db.Timestamp
  invoice_products InvoiceProducts[]
  user      User     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  customer  Customer @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model InvoiceProducts {
  id           Int      @id @default(autoincrement())
  invoices_id  Int
  product_id   Int
  user_id      Int
  qty          String
  sale_price   String   // Consider using a numeric type (e.g., Decimal) for price if applicable
  created_at   DateTime @db.Timestamp
  update_at    DateTime @db.Timestamp
  products     Products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  invoices     Invoices @relation(fields: [invoices_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user         User     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}
